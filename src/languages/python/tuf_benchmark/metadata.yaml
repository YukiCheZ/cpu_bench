# metadata.yaml for TUF CPU Benchmark
name: tuf_benchmark
type: microbenchmark
language: Python
domain:
  - security
  - metadata
  - hashing
  - integrity

setup:
  command: python3 setup.py

workloads:
  - name: tuf-metadata
    description: Benchmark TUF metadata parsing and file hashing (SHA256) performance
    data:
      command: python3 generate_data.py
      parameters:
        size:
          description: Total target data size in bytes
          default: 536870912   # 512 MiB
        meta:
          description: Number of metadata files, 
          default: 10
        targets:
          description: Number of target files
          default: 5
    command: python3 run_benchmark.py
    parameters:
      threads:
        description: Number of parallel worker processes
        default: 1
      iters:
        description: Iterations per worker
        default: 1000
      warmup:
        description: Warmup iterations per worker
        default: 3
      repo:
        description: Path to test repository (not used in memory mode)
        default: ./data

characteristics:
  IO_effects: minimal          # Metadata and target files are generated in memory
  single_machine: true         
  network_effects: none        # No network access
  cpu_bound: true              # JSON parsing + SHA256 hashing
  memory_bound: true           # Handling multi-GB target files in memory
  memory_effects: medium      

tags:
  - hashing
  - json
  - parsing
  - integrity
  - tuf
  - security

dependencies:
  python: ">=3.8"
  securesystemslib: ">=0.30"   # indirect dependency of TUF
  tuf: ">=2.0"
